def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 34
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.municipiumapp.municipium"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-build-configuration.
        minSdkVersion  23
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {

        google {
            storeFile file("../municipium.keystore")
            storePassword "municipium"
            keyAlias "municipium"
            keyPassword "municipium"
        }
        huawei {
            storeFile file("../municipium.keystore")
            storePassword "municipium"
            keyAlias "municipium-huaweidemo"
            keyPassword "municipium"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
           
            buildConfigField "String", "A", "\"QUtJQUlCNU4yWjZENEg1UEk3WUE=\""
            buildConfigField "String", "B", "\"aVdsTGh5V2VkK1dxbUVEVzM1NTRZT3FrVnUyS2VtanFRenNJWWMwYQ==\""
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //   signingConfig signingConfigs.release
        }
        debug {
            buildConfigField "String", "A", "\"QUtJQUlCNU4yWjZENEg1UEk3WUE=\""
            buildConfigField "String", "B", "\"aVdsTGh5V2VkK1dxbUVEVzM1NTRZT3FrVnUyS2VtanFRenNJWWMwYQ==\""
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig null
        }
    }
    flavorDimensions "default"

    productFlavors {
        
        googleDemo {
            buildConfigField "String", "ENVIRONMENT", "\"PRODUCTION\""
            versionNameSuffix "-google"
            signingConfig signingConfigs.google
            
        }
    }
    lintOptions {
        checkReleaseBuilds false
        disable 'MissingTranslation'
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
    dynamicFeatures = []
    namespace 'com.municipiumapp.municipium'
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
